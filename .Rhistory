library(SpatMCA)
library(SpatMCA)
library(SpatMCA)
library(SpatMCA)
library(SpatPCA)
install.packages('fields')
library(SpatMCA)
library(SpatMCA)
library(SpatMCA)
x <- y <- z <- as.matrix(seq(-7, 7, length = 5))
d <- expand.grid(x, y, z)
u_3D <- v_3D <- exp(-d[,1]^2 - d[,2]^2 -d[,3]^2)/norm(exp(-d[,1]^2 - d[,2]^2 -d[,3]^2), "F")
p <- q <- 5^3
x
y
d
exp(-d[,1]^2 - d[,2]^2 -d[,3]^2)/norm(exp(-d[,1]^2 - d[,2]^2 -d[,3]^2), "F")
norm(exp(-d[,1]^2 - d[,2]^2 -d[,3]^2), "F")
d
class(d)
d <- as.matrix(expand.grid(x, y, z))
d
u_3D <- v_3D <- exp(-d[,1]^2 - d[,2]^2 -d[,3]^2)/norm(exp(-d[,1]^2 - d[,2]^2 -d[,3]^2), "F")
p <- q <- 5^3
d
d[,2]
exp(-d[,1]^2 - d[,2]^2 -d[,3]^2)
norm(exp(-d[,1]^2 - d[,2]^2 -d[,3]^2))
temp_vec <- exp(-d[,1]^2 - d[,2]^2 -d[,3]^2)
temp_vec/t(temp_vec)%*%temp_vec
t(temp_vec)%*%temp_vec
x <- y <- z <- as.matrix(seq(-7, 7, length = 5))
d <- expand.grid(x, y, z)
u_3D <- v_3D <- exp(-d[,1]^2 - d[,2]^2 -d[,3]^2)
p <- q <- 5^3
Sigma_3D <- array(0, c(p + q, p + q))
Sigma_3D[1:p, 1:p] <- diag(p)
Sigma_3D[(p + 1):(p + q), (p + 1):(p + q)] <- diag(p)
Sigma_3D[1:p, (p + 1):(p + q)]  <- u_3D %*% t(v_3D)
Sigma_3D[(p + 1):(p + q), 1:p] <- t(Sigma_3D[1:p, (p + 1):(p + q)])
n
n <- 100
noise_3D <- MASS::mvrnorm(n, mu = rep(0, p + q), Sigma = 0.001*diag(p + q))
Y_3D <- MASS:::mvrnorm(n, mu = rep(0, p + q), Sigma = Sigma_3D) + noise_3D
Y1_3D <- Y_3D[,1:p]
Y2_3D <- Y_3D[,-(1:p)]
cv_3D <- spatmca(d, d, Y1_3D, Y2_3D)
library(SpatMCA)
cv_3D <- spatmca(d, d, Y1_3D, Y2_3D)
cv_3D
library(plot3D)
library(RColorBrewer)
install.packages("plot3D")
library(plot3D)
library(RColorBrewer)
cols <- colorRampPalette(brewer.pal(9,'Blues'))(10)
isosurf3D(x, y, z, colvar = array(cv_3D$Uestfn[,1], c(5, 5, 5)),
level= seq(min(cv_3D$Uestfn[,1]), max(cv_3D$Uestfn[,1]), length=10),
ticktype = "detailed",
colkey = list(side = 1),
col = cols)
cols <- colorRampPalette(brewer.pal(9,'Blues'))(10)
isosurf3D(x, y, z, colvar = array(cv_3D$Uestfn[,1], c(5, 5, 5)),
level= seq(min(cv_3D$Uestfn[,1]), max(cv_3D$Uestfn[,1]), length=10),
ticktype = "detailed",
colkey = list(side = 1),
col = cols, main = "U")
isosurf3D(x, y, z, colvar = array(cv_3D$Vestfn[,1], c(5, 5, 5)),
level= seq(min(cv_3D$Vestfn[,1]), max(cv_3D$Vestfn[,1]), length=10),
ticktype = "detailed",
colkey = list(side = 1),
col = cols,
main = "1st estimated pattern for Y2")
n <- 100
x <- y <- z <- as.matrix(seq(-7, 7, length = 5))
d <- expand.grid(x, y, z)
u_3D <- v_3D <- exp(-d[,1]^2 - d[,2]^2 -d[,3]^2)
p <- q <- 5^3
Sigma_3D <- array(0, c(p + q, p + q))
Sigma_3D[1:p, 1:p] <- diag(p)
Sigma_3D[(p + 1):(p + q), (p + 1):(p + q)] <- diag(p)
Sigma_3D[1:p, (p + 1):(p + q)] <- u_3D\%*\%t(v_3D)
Sigma_3D[(p + 1):(p + q), 1:p] <- t(Sigma_3D[1:p, (p + 1):(p + q)])
noise_3D <- MASS::mvrnorm(n, mu = rep(0, p + q), Sigma = 0.001*diag(p + q))
Y_3D <- MASS:::mvrnorm(n, mu = rep(0, p + q), Sigma = Sigma_3D) + noise_3D
Y1_3D <- Y_3D[,1:p]
Y2_3D <- Y_3D[,-(1:p)]
cv_3D <- spatmca(d, d, Y1_3D, Y2_3D)
library(plot3D)
library(RColorBrewer)
cols <- colorRampPalette(brewer.pal(9,'Blues'))(10)
isosurf3D(x, y, z, colvar = array(cv_3D$Uestfn[,1], c(5, 5, 5)),
level= seq(min(cv_3D$Uestfn[,1]), max(cv_3D$Uestfn[,1]), length=10),
ticktype = "detailed",
colkey = list(side = 1),
col = cols,
main = "1st estimated pattern for Y1")
isosurf3D(x, y, z, colvar = array(cv_3D$Vestfn[,1], c(5, 5, 5)),
level= seq(min(cv_3D$Vestfn[,1]), max(cv_3D$Vestfn[,1]), length=10),
ticktype = "detailed",
colkey = list(side = 1),
col = cols,
main = "1st estimated pattern for Y2")
cv_3D$Vestfn[,1]
isosurf3D(x, y, z, colvar = array(cv_3D$Vestfn[,1], c(5, 5, 5)),
level= seq(min(cv_3D$Vestfn[,1]), max(cv_3D$Vestfn[,1]), length=10),
ticktype = "detailed",
colkey = list(side = 1),
col = cols,
main = "1st estimated pattern for Y2")
min(cv_3D$Vestfn[,1])
isosurf3D(x, y, z, colvar = array(cv_3D$Uestfn[,1], c(5, 5, 5)),
level= seq(min(cv_3D$Uestfn[,1]), max(cv_3D$Uestfn[,1]), length=10),
ticktype = "detailed",
colkey = list(side = 1),
col = cols,
main = "1st estimated pattern for Y1")
isosurf3D(x, y, z, colvar = array(cv_3D$Vestfn[,1], c(5, 5, 5)),
level= seq(min(cv_3D$Vestfn[,1]), max(cv_3D$Vestfn[,1]), length=10),
ticktype = "detailed",
colkey = list(side = 1),
col = cols,
main = "1st estimated pattern for Y2")
seq(min(cv_3D$Vestfn[,1]), max(cv_3D$Vestfn[,1])
seq(min(cv_3D$Vestfn[,1]), max(cv_3D$Vestfn[,1]), length=10)
isosurf3D(x, y, z, colvar = array(cv_3D$Vestfn[,1], c(5, 5, 5)))
cols
isosurf3D(x, y, z, colvar = array(cv_3D$Vestfn[,1], c(5, 5, 5)),
level= seq(min(cv_3D$Vestfn[,1]), max(cv_3D$Vestfn[,1]), length=10),
ticktype = "detailed",
colkey = list(side = 1))
isosurf3D(x, y, z, colvar = array(cv_3D$Vestfn[,1], c(5, 5, 5)),
level= seq(min(cv_3D$Vestfn[,1]), max(cv_3D$Vestfn[,1]), length=10))
isosurf3D(x, y, z, colvar = array(cv_3D$Vestfn[,1], c(5, 5, 5)),
ticktype = "detailed",
colkey = list(side = 1),
col = cols,
main = "1st estimated pattern for Y2")
isosurf3D(x, y, z, colvar = array(cv_3D$Vestfn[,1], c(5, 5, 5)),
ticktype = "detailed",
colkey = list(side = 1),
main = "1st estimated pattern for Y2")
isosurf3D(x, y, z, colvar = array(cv_3D$Vestfn[,1], c(5, 5, 5)),
level= seq(min(cv_3D$Vestfn[,1]), max(cv_3D$Vestfn[,1]), length=10),
ticktype = "detailed",
#colkey = list(side = 1),
col = cols,
main = "1st estimated pattern for Y2")
x
y
z
n <- 200
x <- y <- z <- as.matrix(seq(-7, 7, length = 8))
d <- expand.grid(x, y, z)
u_3D <- v_3D <- exp(-d[,1]^2 - d[,2]^2 -d[,3]^2)
p <- q <- 5^3
Sigma_3D <- array(0, c(p + q, p + q))
Sigma_3D[1:p, 1:p] <- diag(p)
Sigma_3D[(p + 1):(p + q), (p + 1):(p + q)] <- diag(p)
Sigma_3D[1:p, (p + 1):(p + q)] <- u_3D\%*\%t(v_3D)
Sigma_3D[(p + 1):(p + q), 1:p] <- t(Sigma_3D[1:p, (p + 1):(p + q)])
noise_3D <- MASS::mvrnorm(n, mu = rep(0, p + q), Sigma = 0.001*diag(p + q))
Y_3D <- MASS:::mvrnorm(n, mu = rep(0, p + q), Sigma = Sigma_3D) + noise_3D
Y1_3D <- Y_3D[,1:p]
Y2_3D <- Y_3D[,-(1:p)]
cv_3D <- spatmca(d, d, Y1_3D, Y2_3D)
Sigma_3D[1:p, (p + 1):(p + q)] <- u_3D%*%t(v_3D)
Sigma_3D[(p + 1):(p + q), 1:p] <- t(Sigma_3D[1:p, (p + 1):(p + q)])
noise_3D <- MASS::mvrnorm(n, mu = rep(0, p + q), Sigma = 0.001*diag(p + q))
Y_3D <- MASS:::mvrnorm(n, mu = rep(0, p + q), Sigma = Sigma_3D) + noise_3D
Y1_3D <- Y_3D[,1:p]
Y2_3D <- Y_3D[,-(1:p)]
cv_3D <- spatmca(d, d, Y1_3D, Y2_3D)
p <- q <- 8^3
Sigma_3D <- array(0, c(p + q, p + q))
Sigma_3D[1:p, 1:p] <- diag(p)
Sigma_3D[(p + 1):(p + q), (p + 1):(p + q)] <- diag(p)
Sigma_3D[1:p, (p + 1):(p + q)] <- u_3D%*%t(v_3D)
Sigma_3D[(p + 1):(p + q), 1:p] <- t(Sigma_3D[1:p, (p + 1):(p + q)])
noise_3D <- MASS::mvrnorm(n, mu = rep(0, p + q), Sigma = 0.001*diag(p + q))
Y_3D <- MASS:::mvrnorm(n, mu = rep(0, p + q), Sigma = Sigma_3D) + noise_3D
Y1_3D <- Y_3D[,1:p]
Y2_3D <- Y_3D[,-(1:p)]
cv_3D <- spatmca(d, d, Y1_3D, Y2_3D)
library(plot3D)
library(RColorBrewer)
cols <- colorRampPalette(brewer.pal(9,'Blues'))(10)
isosurf3D(x, y, z, colvar = array(cv_3D$Uestfn[,1], c(8, 8, 8)),
level= seq(min(cv_3D$Uestfn[,1]), max(cv_3D$Uestfn[,1]), length=10),
ticktype = "detailed",
colkey = list(side = 1),
col = cols,
main = "1st estimated pattern for Y1")
isosurf3D(x, y, z, colvar = array(cv_3D$Vestfn[,1], c(8, 8, 8)),
level= seq(min(cv_3D$Vestfn[,1]), max(cv_3D$Vestfn[,1]), length=10),
ticktype = "detailed",
colkey = list(side = 1),
col = cols,
main = "1st estimated pattern for Y2")
library(SpatMCA)
system.time(t208 <- sapply(dictionary$繁體字[207001:208000], zhuyin))
save(t208, file="t208.RData")
system.time(t208 <- sapply(dictionary$繁體字[207001:208000], zhuyin))
save(t208, file="t208.RData")
p <- q <- 20
n <- 100
x1 <- matrix(seq(-7, 7, length = p), nrow = p, ncol = 1)
x2 <- matrix(seq(-7, 7, length = q), nrow = q, ncol = 1)
u <- exp(-x1^2)/norm(exp(-x1^2), "F")
v <- exp(-(x2 - 2)^2)/norm(exp(-(x2 - 2)^2), "F")
Sigma <- array(0, c(p + q, p + q))
Sigma[1:p, 1:p] <- diag(p)
Sigma[(p + 1):(p + q), (p + 1):(p + q)] <- diag(p)
Sigma[1:p, (p + 1):(p + q)] <- u%*%t(v)
Sigma[(p + 1):(p + q), 1:p] <- t(Sigma[1:p, (p + 1):(p + q)])
noise <- MASS::mvrnorm(n, mu = rep(0, p + q), Sigma = 0.001*diag(p + q))
Y <- MASS:::mvrnorm(n, mu = rep(0, p + q), Sigma = Sigma) + noise
Y1 <- Y[,1:p]
Y2 <- Y[,-(1:p)]
cv1 <- spatmca(x1, x2, Y1, Y2)
library(SpatMCA)
cv1 <- spatmca(x1, x2, Y1, Y2)
library(SpatMCA)
cv1 <- spatmca(x1, x2, Y1, Y2)
